/* tslint:disable */
/* eslint-disable */
/*
MultiWoven API

Open-source Reverse ETL that makes data segmentation, sync and activation both easy and fully secure.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { SyncRecordsListForSyncRun404Response } from '../models';
// @ts-ignore
import { SyncRecordsListForSyncRunResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SyncRecordsApi - axios parameter creator
 * @export
 */
export const SyncRecordsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a list of sync records for a specific sync run, optionally filtered by status.
         * @summary List sync records for a specific sync run
         * @param {number} syncId The ID of the sync to list records for.
         * @param {number} syncRunId The ID of the sync run to list records for.
         * @param {string} [status] Optional status to filter the sync records by.
         * @param {number} [page] Page number for pagination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listForSyncRun: async (syncId: number, syncRunId: number, status?: string, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'syncId' is not null or undefined
            assertParamExists('listForSyncRun', 'syncId', syncId)
            // verify required parameter 'syncRunId' is not null or undefined
            assertParamExists('listForSyncRun', 'syncRunId', syncRunId)
            const localVarPath = `/api/v1/syncs/{sync_id}/sync_runs/{sync_run_id}/sync_records`
                .replace(`{${"sync_id"}}`, encodeURIComponent(String(syncId !== undefined ? syncId : `-sync_id-`)))
                .replace(`{${"sync_run_id"}}`, encodeURIComponent(String(syncRunId !== undefined ? syncRunId : `-sync_run_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/syncs/{sync_id}/sync_runs/{sync_run_id}/sync_records',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SyncRecordsApi - functional programming interface
 * @export
 */
export const SyncRecordsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SyncRecordsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a list of sync records for a specific sync run, optionally filtered by status.
         * @summary List sync records for a specific sync run
         * @param {SyncRecordsApiListForSyncRunRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listForSyncRun(requestParameters: SyncRecordsApiListForSyncRunRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncRecordsListForSyncRunResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listForSyncRun(requestParameters.syncId, requestParameters.syncRunId, requestParameters.status, requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SyncRecordsApi - factory interface
 * @export
 */
export const SyncRecordsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SyncRecordsApiFp(configuration)
    return {
        /**
         * Retrieves a list of sync records for a specific sync run, optionally filtered by status.
         * @summary List sync records for a specific sync run
         * @param {SyncRecordsApiListForSyncRunRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listForSyncRun(requestParameters: SyncRecordsApiListForSyncRunRequest, options?: AxiosRequestConfig): AxiosPromise<SyncRecordsListForSyncRunResponse> {
            return localVarFp.listForSyncRun(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listForSyncRun operation in SyncRecordsApi.
 * @export
 * @interface SyncRecordsApiListForSyncRunRequest
 */
export type SyncRecordsApiListForSyncRunRequest = {
    
    /**
    * The ID of the sync to list records for.
    * @type {number}
    * @memberof SyncRecordsApiListForSyncRun
    */
    readonly syncId: number
    
    /**
    * The ID of the sync run to list records for.
    * @type {number}
    * @memberof SyncRecordsApiListForSyncRun
    */
    readonly syncRunId: number
    
    /**
    * Optional status to filter the sync records by.
    * @type {string}
    * @memberof SyncRecordsApiListForSyncRun
    */
    readonly status?: string
    
    /**
    * Page number for pagination.
    * @type {number}
    * @memberof SyncRecordsApiListForSyncRun
    */
    readonly page?: number
    
}

/**
 * SyncRecordsApiGenerated - object-oriented interface
 * @export
 * @class SyncRecordsApiGenerated
 * @extends {BaseAPI}
 */
export class SyncRecordsApiGenerated extends BaseAPI {
    /**
     * Retrieves a list of sync records for a specific sync run, optionally filtered by status.
     * @summary List sync records for a specific sync run
     * @param {SyncRecordsApiListForSyncRunRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncRecordsApiGenerated
     */
    public listForSyncRun(requestParameters: SyncRecordsApiListForSyncRunRequest, options?: AxiosRequestConfig) {
        return SyncRecordsApiFp(this.configuration).listForSyncRun(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
