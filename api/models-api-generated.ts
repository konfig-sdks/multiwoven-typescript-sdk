/* tslint:disable */
/* eslint-disable */
/*
MultiWoven API

Open-source Reverse ETL that makes data segmentation, sync and activation both easy and fully secure.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ModelsCreateModelRequest } from '../models';
// @ts-ignore
import { ModelsCreateModelRequestModel } from '../models';
// @ts-ignore
import { ModelsCreateModelResponse } from '../models';
// @ts-ignore
import { ModelsGetByIdResponse } from '../models';
// @ts-ignore
import { ModelsListAllModelsResponse } from '../models';
// @ts-ignore
import { ModelsUpdateModelByIdRequest } from '../models';
// @ts-ignore
import { ModelsUpdateModelByIdResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ModelsApi - axios parameter creator
 * @export
 */
export const ModelsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a model
         * @param {ModelsCreateModelRequest} [modelsCreateModelRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModel: async (modelsCreateModelRequest?: ModelsCreateModelRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: modelsCreateModelRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/models',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(modelsCreateModelRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a model
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModel: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteModel', 'id', id)
            const localVarPath = `/api/v1/models/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/models/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a model
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/api/v1/models/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/models/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lists all models
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllModels: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/models',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a model
         * @param {number} id 
         * @param {ModelsUpdateModelByIdRequest} [modelsUpdateModelByIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModelById: async (id: number, modelsUpdateModelByIdRequest?: ModelsUpdateModelByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateModelById', 'id', id)
            const localVarPath = `/api/v1/models/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: modelsUpdateModelByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/models/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(modelsUpdateModelByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ModelsApi - functional programming interface
 * @export
 */
export const ModelsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ModelsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a model
         * @param {ModelsApiCreateModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createModel(requestParameters: ModelsApiCreateModelRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsCreateModelResponse>> {
            const modelsCreateModelRequest: ModelsCreateModelRequest = {
                model: requestParameters.model
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createModel(modelsCreateModelRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a model
         * @param {ModelsApiDeleteModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteModel(requestParameters: ModelsApiDeleteModelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteModel(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves a model
         * @param {ModelsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: ModelsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsGetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Lists all models
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllModels(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsListAllModelsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllModels(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates a model
         * @param {ModelsApiUpdateModelByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateModelById(requestParameters: ModelsApiUpdateModelByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsUpdateModelByIdResponse>> {
            const modelsUpdateModelByIdRequest: ModelsUpdateModelByIdRequest = {
                model: requestParameters.model
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateModelById(requestParameters.id, modelsUpdateModelByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ModelsApi - factory interface
 * @export
 */
export const ModelsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ModelsApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a model
         * @param {ModelsApiCreateModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModel(requestParameters: ModelsApiCreateModelRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ModelsCreateModelResponse> {
            return localVarFp.createModel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a model
         * @param {ModelsApiDeleteModelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModel(requestParameters: ModelsApiDeleteModelRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteModel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves a model
         * @param {ModelsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: ModelsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ModelsGetByIdResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lists all models
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllModels(options?: AxiosRequestConfig): AxiosPromise<ModelsListAllModelsResponse> {
            return localVarFp.listAllModels(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates a model
         * @param {ModelsApiUpdateModelByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModelById(requestParameters: ModelsApiUpdateModelByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ModelsUpdateModelByIdResponse> {
            return localVarFp.updateModelById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createModel operation in ModelsApi.
 * @export
 * @interface ModelsApiCreateModelRequest
 */
export type ModelsApiCreateModelRequest = {
    
} & ModelsCreateModelRequest

/**
 * Request parameters for deleteModel operation in ModelsApi.
 * @export
 * @interface ModelsApiDeleteModelRequest
 */
export type ModelsApiDeleteModelRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof ModelsApiDeleteModel
    */
    readonly id: number
    
}

/**
 * Request parameters for getById operation in ModelsApi.
 * @export
 * @interface ModelsApiGetByIdRequest
 */
export type ModelsApiGetByIdRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof ModelsApiGetById
    */
    readonly id: number
    
}

/**
 * Request parameters for updateModelById operation in ModelsApi.
 * @export
 * @interface ModelsApiUpdateModelByIdRequest
 */
export type ModelsApiUpdateModelByIdRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof ModelsApiUpdateModelById
    */
    readonly id: number
    
} & ModelsUpdateModelByIdRequest

/**
 * ModelsApiGenerated - object-oriented interface
 * @export
 * @class ModelsApiGenerated
 * @extends {BaseAPI}
 */
export class ModelsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Creates a model
     * @param {ModelsApiCreateModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApiGenerated
     */
    public createModel(requestParameters: ModelsApiCreateModelRequest = {}, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).createModel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a model
     * @param {ModelsApiDeleteModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApiGenerated
     */
    public deleteModel(requestParameters: ModelsApiDeleteModelRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).deleteModel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves a model
     * @param {ModelsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApiGenerated
     */
    public getById(requestParameters: ModelsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lists all models
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApiGenerated
     */
    public listAllModels(options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).listAllModels(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates a model
     * @param {ModelsApiUpdateModelByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelsApiGenerated
     */
    public updateModelById(requestParameters: ModelsApiUpdateModelByIdRequest, options?: AxiosRequestConfig) {
        return ModelsApiFp(this.configuration).updateModelById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
