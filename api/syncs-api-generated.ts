/* tslint:disable */
/* eslint-disable */
/*
MultiWoven API

Open-source Reverse ETL that makes data segmentation, sync and activation both easy and fully secure.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { SyncsCreateNewSyncOperationRequest } from '../models';
// @ts-ignore
import { SyncsCreateNewSyncOperationRequestSync } from '../models';
// @ts-ignore
import { SyncsCreateNewSyncOperationResponse } from '../models';
// @ts-ignore
import { SyncsGetReportDataResponse } from '../models';
// @ts-ignore
import { SyncsListOperationsResponse } from '../models';
// @ts-ignore
import { SyncsShowDetailsResponse } from '../models';
// @ts-ignore
import { SyncsUpdateSpecificSyncRequest } from '../models';
// @ts-ignore
import { SyncsUpdateSpecificSyncRequestSync } from '../models';
// @ts-ignore
import { SyncsUpdateSpecificSyncResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SyncsApi - axios parameter creator
 * @export
 */
export const SyncsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new sync operation
         * @param {SyncsCreateNewSyncOperationRequest} syncsCreateNewSyncOperationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewSyncOperation: async (syncsCreateNewSyncOperationRequest: SyncsCreateNewSyncOperationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'syncsCreateNewSyncOperationRequest' is not null or undefined
            assertParamExists('createNewSyncOperation', 'syncsCreateNewSyncOperationRequest', syncsCreateNewSyncOperationRequest)
            const localVarPath = `/api/v1/syncs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: syncsCreateNewSyncOperationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/syncs',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(syncsCreateNewSyncOperationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a specific sync operation
         * @param {string} id The ID of the sync operation to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSyncOperation: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSyncOperation', 'id', id)
            const localVarPath = `/api/v1/syncs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/syncs/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get report data based on given type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportData: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/syncs/configurations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/syncs/configurations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all sync operations
         * @param {number} [pageNumber] Page number for pagination
         * @param {number} [pageSize] Number of items per page for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOperations: async (pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/syncs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (pageNumber !== undefined) {
                localVarQueryParameter['page[number]'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page[size]'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/syncs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show details of a specific sync operation
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showDetails: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showDetails', 'id', id)
            const localVarPath = `/api/v1/syncs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/syncs/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a specific sync operation
         * @param {string} id 
         * @param {SyncsUpdateSpecificSyncRequest} syncsUpdateSpecificSyncRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSpecificSync: async (id: string, syncsUpdateSpecificSyncRequest: SyncsUpdateSpecificSyncRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateSpecificSync', 'id', id)
            // verify required parameter 'syncsUpdateSpecificSyncRequest' is not null or undefined
            assertParamExists('updateSpecificSync', 'syncsUpdateSpecificSyncRequest', syncsUpdateSpecificSyncRequest)
            const localVarPath = `/api/v1/syncs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: syncsUpdateSpecificSyncRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/syncs/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(syncsUpdateSpecificSyncRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SyncsApi - functional programming interface
 * @export
 */
export const SyncsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SyncsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new sync operation
         * @param {SyncsApiCreateNewSyncOperationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewSyncOperation(requestParameters: SyncsApiCreateNewSyncOperationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncsCreateNewSyncOperationResponse>> {
            const syncsCreateNewSyncOperationRequest: SyncsCreateNewSyncOperationRequest = {
                sync: requestParameters.sync
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewSyncOperation(syncsCreateNewSyncOperationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a specific sync operation
         * @param {SyncsApiDeleteSyncOperationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSyncOperation(requestParameters: SyncsApiDeleteSyncOperationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSyncOperation(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get report data based on given type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReportData(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncsGetReportDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReportData(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List all sync operations
         * @param {SyncsApiListOperationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOperations(requestParameters: SyncsApiListOperationsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncsListOperationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOperations(requestParameters.pageNumber, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Show details of a specific sync operation
         * @param {SyncsApiShowDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showDetails(requestParameters: SyncsApiShowDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncsShowDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showDetails(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a specific sync operation
         * @param {SyncsApiUpdateSpecificSyncRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSpecificSync(requestParameters: SyncsApiUpdateSpecificSyncRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncsUpdateSpecificSyncResponse>> {
            const syncsUpdateSpecificSyncRequest: SyncsUpdateSpecificSyncRequest = {
                sync: requestParameters.sync
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSpecificSync(requestParameters.id, syncsUpdateSpecificSyncRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SyncsApi - factory interface
 * @export
 */
export const SyncsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SyncsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new sync operation
         * @param {SyncsApiCreateNewSyncOperationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewSyncOperation(requestParameters: SyncsApiCreateNewSyncOperationRequest, options?: AxiosRequestConfig): AxiosPromise<SyncsCreateNewSyncOperationResponse> {
            return localVarFp.createNewSyncOperation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a specific sync operation
         * @param {SyncsApiDeleteSyncOperationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSyncOperation(requestParameters: SyncsApiDeleteSyncOperationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSyncOperation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get report data based on given type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportData(options?: AxiosRequestConfig): AxiosPromise<SyncsGetReportDataResponse> {
            return localVarFp.getReportData(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all sync operations
         * @param {SyncsApiListOperationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOperations(requestParameters: SyncsApiListOperationsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<SyncsListOperationsResponse> {
            return localVarFp.listOperations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show details of a specific sync operation
         * @param {SyncsApiShowDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showDetails(requestParameters: SyncsApiShowDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<SyncsShowDetailsResponse> {
            return localVarFp.showDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a specific sync operation
         * @param {SyncsApiUpdateSpecificSyncRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSpecificSync(requestParameters: SyncsApiUpdateSpecificSyncRequest, options?: AxiosRequestConfig): AxiosPromise<SyncsUpdateSpecificSyncResponse> {
            return localVarFp.updateSpecificSync(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewSyncOperation operation in SyncsApi.
 * @export
 * @interface SyncsApiCreateNewSyncOperationRequest
 */
export type SyncsApiCreateNewSyncOperationRequest = {
    
} & SyncsCreateNewSyncOperationRequest

/**
 * Request parameters for deleteSyncOperation operation in SyncsApi.
 * @export
 * @interface SyncsApiDeleteSyncOperationRequest
 */
export type SyncsApiDeleteSyncOperationRequest = {
    
    /**
    * The ID of the sync operation to delete
    * @type {string}
    * @memberof SyncsApiDeleteSyncOperation
    */
    readonly id: string
    
}

/**
 * Request parameters for listOperations operation in SyncsApi.
 * @export
 * @interface SyncsApiListOperationsRequest
 */
export type SyncsApiListOperationsRequest = {
    
    /**
    * Page number for pagination
    * @type {number}
    * @memberof SyncsApiListOperations
    */
    readonly pageNumber?: number
    
    /**
    * Number of items per page for pagination
    * @type {number}
    * @memberof SyncsApiListOperations
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for showDetails operation in SyncsApi.
 * @export
 * @interface SyncsApiShowDetailsRequest
 */
export type SyncsApiShowDetailsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SyncsApiShowDetails
    */
    readonly id: string
    
}

/**
 * Request parameters for updateSpecificSync operation in SyncsApi.
 * @export
 * @interface SyncsApiUpdateSpecificSyncRequest
 */
export type SyncsApiUpdateSpecificSyncRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SyncsApiUpdateSpecificSync
    */
    readonly id: string
    
} & SyncsUpdateSpecificSyncRequest

/**
 * SyncsApiGenerated - object-oriented interface
 * @export
 * @class SyncsApiGenerated
 * @extends {BaseAPI}
 */
export class SyncsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create a new sync operation
     * @param {SyncsApiCreateNewSyncOperationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncsApiGenerated
     */
    public createNewSyncOperation(requestParameters: SyncsApiCreateNewSyncOperationRequest, options?: AxiosRequestConfig) {
        return SyncsApiFp(this.configuration).createNewSyncOperation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a specific sync operation
     * @param {SyncsApiDeleteSyncOperationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncsApiGenerated
     */
    public deleteSyncOperation(requestParameters: SyncsApiDeleteSyncOperationRequest, options?: AxiosRequestConfig) {
        return SyncsApiFp(this.configuration).deleteSyncOperation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get report data based on given type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncsApiGenerated
     */
    public getReportData(options?: AxiosRequestConfig) {
        return SyncsApiFp(this.configuration).getReportData(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all sync operations
     * @param {SyncsApiListOperationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncsApiGenerated
     */
    public listOperations(requestParameters: SyncsApiListOperationsRequest = {}, options?: AxiosRequestConfig) {
        return SyncsApiFp(this.configuration).listOperations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show details of a specific sync operation
     * @param {SyncsApiShowDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncsApiGenerated
     */
    public showDetails(requestParameters: SyncsApiShowDetailsRequest, options?: AxiosRequestConfig) {
        return SyncsApiFp(this.configuration).showDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a specific sync operation
     * @param {SyncsApiUpdateSpecificSyncRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncsApiGenerated
     */
    public updateSpecificSync(requestParameters: SyncsApiUpdateSpecificSyncRequest, options?: AxiosRequestConfig) {
        return SyncsApiFp(this.configuration).updateSpecificSync(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
