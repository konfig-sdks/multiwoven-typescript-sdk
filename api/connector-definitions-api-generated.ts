/* tslint:disable */
/* eslint-disable */
/*
MultiWoven API

Open-source Reverse ETL that makes data segmentation, sync and activation both easy and fully secure.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ConnectorDefinitionsCheckConnectionRequest } from '../models';
// @ts-ignore
import { ConnectorDefinitionsCheckConnectionResponse } from '../models';
// @ts-ignore
import { ConnectorDefinitionsGetBasedOnTypeResponseInner } from '../models';
// @ts-ignore
import { ConnectorDefinitionsGetByNameResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ConnectorDefinitionsApi - axios parameter creator
 * @export
 */
export const ConnectorDefinitionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Checks the connection for a specified connector definition
         * @param {ConnectorDefinitionsCheckConnectionRequest} connectorDefinitionsCheckConnectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkConnection: async (connectorDefinitionsCheckConnectionRequest: ConnectorDefinitionsCheckConnectionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'connectorDefinitionsCheckConnectionRequest' is not null or undefined
            assertParamExists('checkConnection', 'connectorDefinitionsCheckConnectionRequest', connectorDefinitionsCheckConnectionRequest)
            const localVarPath = `/api/v1/connector_definitions/check_connection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: connectorDefinitionsCheckConnectionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/connector_definitions/check_connection',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(connectorDefinitionsCheckConnectionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve connector definitions based on type
         * @param {'source' | 'destination'} type Type of the connector (source or destination)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasedOnType: async (type: 'source' | 'destination', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getBasedOnType', 'type', type)
            const localVarPath = `/api/v1/connector_definitions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/connector_definitions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve specific connector definition based on its name
         * @param {string} connectorName Name of the connector
         * @param {'source' | 'destination'} type Type of the connector (source or destination)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByName: async (connectorName: string, type: 'source' | 'destination', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'connectorName' is not null or undefined
            assertParamExists('getByName', 'connectorName', connectorName)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getByName', 'type', type)
            const localVarPath = `/api/v1/connector_definitions/{connector_name}`
                .replace(`{${"connector_name"}}`, encodeURIComponent(String(connectorName !== undefined ? connectorName : `-connector_name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/connector_definitions/{connector_name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConnectorDefinitionsApi - functional programming interface
 * @export
 */
export const ConnectorDefinitionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConnectorDefinitionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Checks the connection for a specified connector definition
         * @param {ConnectorDefinitionsApiCheckConnectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkConnection(requestParameters: ConnectorDefinitionsApiCheckConnectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectorDefinitionsCheckConnectionResponse>> {
            const connectorDefinitionsCheckConnectionRequest: ConnectorDefinitionsCheckConnectionRequest = {
                type: requestParameters.type,
                name: requestParameters.name,
                connection_spec: requestParameters.connection_spec
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkConnection(connectorDefinitionsCheckConnectionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve connector definitions based on type
         * @param {ConnectorDefinitionsApiGetBasedOnTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBasedOnType(requestParameters: ConnectorDefinitionsApiGetBasedOnTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConnectorDefinitionsGetBasedOnTypeResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBasedOnType(requestParameters.type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve specific connector definition based on its name
         * @param {ConnectorDefinitionsApiGetByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByName(requestParameters: ConnectorDefinitionsApiGetByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectorDefinitionsGetByNameResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByName(requestParameters.connectorName, requestParameters.type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConnectorDefinitionsApi - factory interface
 * @export
 */
export const ConnectorDefinitionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConnectorDefinitionsApiFp(configuration)
    return {
        /**
         * 
         * @summary Checks the connection for a specified connector definition
         * @param {ConnectorDefinitionsApiCheckConnectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkConnection(requestParameters: ConnectorDefinitionsApiCheckConnectionRequest, options?: AxiosRequestConfig): AxiosPromise<ConnectorDefinitionsCheckConnectionResponse> {
            return localVarFp.checkConnection(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve connector definitions based on type
         * @param {ConnectorDefinitionsApiGetBasedOnTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasedOnType(requestParameters: ConnectorDefinitionsApiGetBasedOnTypeRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ConnectorDefinitionsGetBasedOnTypeResponseInner>> {
            return localVarFp.getBasedOnType(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve specific connector definition based on its name
         * @param {ConnectorDefinitionsApiGetByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByName(requestParameters: ConnectorDefinitionsApiGetByNameRequest, options?: AxiosRequestConfig): AxiosPromise<ConnectorDefinitionsGetByNameResponse> {
            return localVarFp.getByName(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for checkConnection operation in ConnectorDefinitionsApi.
 * @export
 * @interface ConnectorDefinitionsApiCheckConnectionRequest
 */
export type ConnectorDefinitionsApiCheckConnectionRequest = {
    
} & ConnectorDefinitionsCheckConnectionRequest

/**
 * Request parameters for getBasedOnType operation in ConnectorDefinitionsApi.
 * @export
 * @interface ConnectorDefinitionsApiGetBasedOnTypeRequest
 */
export type ConnectorDefinitionsApiGetBasedOnTypeRequest = {
    
    /**
    * Type of the connector (source or destination)
    * @type {'source' | 'destination'}
    * @memberof ConnectorDefinitionsApiGetBasedOnType
    */
    readonly type: 'source' | 'destination'
    
}

/**
 * Request parameters for getByName operation in ConnectorDefinitionsApi.
 * @export
 * @interface ConnectorDefinitionsApiGetByNameRequest
 */
export type ConnectorDefinitionsApiGetByNameRequest = {
    
    /**
    * Name of the connector
    * @type {string}
    * @memberof ConnectorDefinitionsApiGetByName
    */
    readonly connectorName: string
    
    /**
    * Type of the connector (source or destination)
    * @type {'source' | 'destination'}
    * @memberof ConnectorDefinitionsApiGetByName
    */
    readonly type: 'source' | 'destination'
    
}

/**
 * ConnectorDefinitionsApiGenerated - object-oriented interface
 * @export
 * @class ConnectorDefinitionsApiGenerated
 * @extends {BaseAPI}
 */
export class ConnectorDefinitionsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Checks the connection for a specified connector definition
     * @param {ConnectorDefinitionsApiCheckConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorDefinitionsApiGenerated
     */
    public checkConnection(requestParameters: ConnectorDefinitionsApiCheckConnectionRequest, options?: AxiosRequestConfig) {
        return ConnectorDefinitionsApiFp(this.configuration).checkConnection(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve connector definitions based on type
     * @param {ConnectorDefinitionsApiGetBasedOnTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorDefinitionsApiGenerated
     */
    public getBasedOnType(requestParameters: ConnectorDefinitionsApiGetBasedOnTypeRequest, options?: AxiosRequestConfig) {
        return ConnectorDefinitionsApiFp(this.configuration).getBasedOnType(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve specific connector definition based on its name
     * @param {ConnectorDefinitionsApiGetByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorDefinitionsApiGenerated
     */
    public getByName(requestParameters: ConnectorDefinitionsApiGetByNameRequest, options?: AxiosRequestConfig) {
        return ConnectorDefinitionsApiFp(this.configuration).getByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
