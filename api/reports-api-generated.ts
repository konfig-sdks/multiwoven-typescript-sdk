/* tslint:disable */
/* eslint-disable */
/*
MultiWoven API

Open-source Reverse ETL that makes data segmentation, sync and activation both easy and fully secure.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ReportsGetDataBasedOnTypeResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ReportsApi - axios parameter creator
 * @export
 */
export const ReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get report data based on given type
         * @param {'workspace_activity'} type Type of the report to query.
         * @param {'sync_run_triggered' | 'total_sync_run_rows' | 'all'} [metric] Specific metric of interest in the report.
         * @param {Array<number>} [connectorIds] IDs of the connectors.
         * @param {'one_week' | 'one_day'} [timePeriod] Time period for the report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataBasedOnType: async (type: 'workspace_activity', metric?: 'sync_run_triggered' | 'total_sync_run_rows' | 'all', connectorIds?: Array<number>, timePeriod?: 'one_week' | 'one_day', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getDataBasedOnType', 'type', type)
            const localVarPath = `/api/v1/reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (metric !== undefined) {
                localVarQueryParameter['metric'] = metric;
            }

            if (connectorIds) {
                localVarQueryParameter['connector_ids'] = connectorIds;
            }

            if (timePeriod !== undefined) {
                localVarQueryParameter['time_period'] = timePeriod;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/reports',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportsApi - functional programming interface
 * @export
 */
export const ReportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get report data based on given type
         * @param {ReportsApiGetDataBasedOnTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataBasedOnType(requestParameters: ReportsApiGetDataBasedOnTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsGetDataBasedOnTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataBasedOnType(requestParameters.type, requestParameters.metric, requestParameters.connectorIds, requestParameters.timePeriod, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportsApi - factory interface
 * @export
 */
export const ReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get report data based on given type
         * @param {ReportsApiGetDataBasedOnTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataBasedOnType(requestParameters: ReportsApiGetDataBasedOnTypeRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsGetDataBasedOnTypeResponse> {
            return localVarFp.getDataBasedOnType(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getDataBasedOnType operation in ReportsApi.
 * @export
 * @interface ReportsApiGetDataBasedOnTypeRequest
 */
export type ReportsApiGetDataBasedOnTypeRequest = {
    
    /**
    * Type of the report to query.
    * @type {'workspace_activity'}
    * @memberof ReportsApiGetDataBasedOnType
    */
    readonly type: 'workspace_activity'
    
    /**
    * Specific metric of interest in the report.
    * @type {'sync_run_triggered' | 'total_sync_run_rows' | 'all'}
    * @memberof ReportsApiGetDataBasedOnType
    */
    readonly metric?: 'sync_run_triggered' | 'total_sync_run_rows' | 'all'
    
    /**
    * IDs of the connectors.
    * @type {Array<number>}
    * @memberof ReportsApiGetDataBasedOnType
    */
    readonly connectorIds?: Array<number>
    
    /**
    * Time period for the report.
    * @type {'one_week' | 'one_day'}
    * @memberof ReportsApiGetDataBasedOnType
    */
    readonly timePeriod?: 'one_week' | 'one_day'
    
}

/**
 * ReportsApiGenerated - object-oriented interface
 * @export
 * @class ReportsApiGenerated
 * @extends {BaseAPI}
 */
export class ReportsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Get report data based on given type
     * @param {ReportsApiGetDataBasedOnTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getDataBasedOnType(requestParameters: ReportsApiGetDataBasedOnTypeRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getDataBasedOnType(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
