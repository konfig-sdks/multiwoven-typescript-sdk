/* tslint:disable */
/* eslint-disable */
/*
MultiWoven API

Open-source Reverse ETL that makes data segmentation, sync and activation both easy and fully secure.

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ConnectorsCreateNewConnectorRequest } from '../models';
// @ts-ignore
import { ConnectorsCreateNewConnectorRequestConnector } from '../models';
// @ts-ignore
import { ConnectorsCreateNewConnectorResponse } from '../models';
// @ts-ignore
import { ConnectorsDiscoverCatalogInfoResponse } from '../models';
// @ts-ignore
import { ConnectorsGetByIdResponse } from '../models';
// @ts-ignore
import { ConnectorsListAllResponse } from '../models';
// @ts-ignore
import { ConnectorsQuerySourceRequest } from '../models';
// @ts-ignore
import { ConnectorsUpdateByIdRequest } from '../models';
// @ts-ignore
import { ConnectorsUpdateByIdRequestConnector } from '../models';
// @ts-ignore
import { ConnectorsUpdateByIdResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ConnectorsApi - axios parameter creator
 * @export
 */
export const ConnectorsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a connector
         * @param {ConnectorsCreateNewConnectorRequest} connectorsCreateNewConnectorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewConnector: async (connectorsCreateNewConnectorRequest: ConnectorsCreateNewConnectorRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'connectorsCreateNewConnectorRequest' is not null or undefined
            assertParamExists('createNewConnector', 'connectorsCreateNewConnectorRequest', connectorsCreateNewConnectorRequest)
            const localVarPath = `/api/v1/connectors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: connectorsCreateNewConnectorRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/connectors',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(connectorsCreateNewConnectorRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a specific connector by ID
         * @param {string} id Unique ID of the connector
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteById', 'id', id)
            const localVarPath = `/api/v1/connectors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/connectors/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Discovers catalog information for a specified connector
         * @param {string} id Unique ID of the connector
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discoverCatalogInfo: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('discoverCatalogInfo', 'id', id)
            const localVarPath = `/api/v1/connectors/{id}/discover`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/connectors/{id}/discover',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a specific connector by ID
         * @param {string} id Unique ID of the connector
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/api/v1/connectors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/connectors/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lists all connectors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/connectors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/connectors',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Query your source data
         * @param {number} id The ID of the connector to query
         * @param {ConnectorsQuerySourceRequest} connectorsQuerySourceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        querySource: async (id: number, connectorsQuerySourceRequest: ConnectorsQuerySourceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('querySource', 'id', id)
            // verify required parameter 'connectorsQuerySourceRequest' is not null or undefined
            assertParamExists('querySource', 'connectorsQuerySourceRequest', connectorsQuerySourceRequest)
            const localVarPath = `/api/v1/connectors/{id}/query_source`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: connectorsQuerySourceRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/connectors/{id}/query_source',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(connectorsQuerySourceRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a specific connector by ID
         * @param {string} id Unique ID of the connector
         * @param {ConnectorsUpdateByIdRequest} connectorsUpdateByIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById: async (id: string, connectorsUpdateByIdRequest: ConnectorsUpdateByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateById', 'id', id)
            // verify required parameter 'connectorsUpdateByIdRequest' is not null or undefined
            assertParamExists('updateById', 'connectorsUpdateByIdRequest', connectorsUpdateByIdRequest)
            const localVarPath = `/api/v1/connectors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: connectorsUpdateByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/connectors/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(connectorsUpdateByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConnectorsApi - functional programming interface
 * @export
 */
export const ConnectorsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConnectorsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a connector
         * @param {ConnectorsApiCreateNewConnectorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewConnector(requestParameters: ConnectorsApiCreateNewConnectorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectorsCreateNewConnectorResponse>> {
            const connectorsCreateNewConnectorRequest: ConnectorsCreateNewConnectorRequest = {
                connector: requestParameters.connector
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewConnector(connectorsCreateNewConnectorRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a specific connector by ID
         * @param {ConnectorsApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteById(requestParameters: ConnectorsApiDeleteByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Discovers catalog information for a specified connector
         * @param {ConnectorsApiDiscoverCatalogInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async discoverCatalogInfo(requestParameters: ConnectorsApiDiscoverCatalogInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectorsDiscoverCatalogInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.discoverCatalogInfo(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves a specific connector by ID
         * @param {ConnectorsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: ConnectorsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectorsGetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Lists all connectors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectorsListAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Query your source data
         * @param {ConnectorsApiQuerySourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async querySource(requestParameters: ConnectorsApiQuerySourceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<{ [key: string]: any; }>>> {
            const connectorsQuerySourceRequest: ConnectorsQuerySourceRequest = {
                query: requestParameters.query
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.querySource(requestParameters.id, connectorsQuerySourceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Updates a specific connector by ID
         * @param {ConnectorsApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateById(requestParameters: ConnectorsApiUpdateByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectorsUpdateByIdResponse>> {
            const connectorsUpdateByIdRequest: ConnectorsUpdateByIdRequest = {
                connector: requestParameters.connector
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateById(requestParameters.id, connectorsUpdateByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConnectorsApi - factory interface
 * @export
 */
export const ConnectorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConnectorsApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a connector
         * @param {ConnectorsApiCreateNewConnectorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewConnector(requestParameters: ConnectorsApiCreateNewConnectorRequest, options?: AxiosRequestConfig): AxiosPromise<ConnectorsCreateNewConnectorResponse> {
            return localVarFp.createNewConnector(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a specific connector by ID
         * @param {ConnectorsApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById(requestParameters: ConnectorsApiDeleteByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Discovers catalog information for a specified connector
         * @param {ConnectorsApiDiscoverCatalogInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discoverCatalogInfo(requestParameters: ConnectorsApiDiscoverCatalogInfoRequest, options?: AxiosRequestConfig): AxiosPromise<ConnectorsDiscoverCatalogInfoResponse> {
            return localVarFp.discoverCatalogInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves a specific connector by ID
         * @param {ConnectorsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: ConnectorsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ConnectorsGetByIdResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lists all connectors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(options?: AxiosRequestConfig): AxiosPromise<ConnectorsListAllResponse> {
            return localVarFp.listAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Query your source data
         * @param {ConnectorsApiQuerySourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        querySource(requestParameters: ConnectorsApiQuerySourceRequest, options?: AxiosRequestConfig): AxiosPromise<Array<{ [key: string]: any; }>> {
            return localVarFp.querySource(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates a specific connector by ID
         * @param {ConnectorsApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById(requestParameters: ConnectorsApiUpdateByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ConnectorsUpdateByIdResponse> {
            return localVarFp.updateById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewConnector operation in ConnectorsApi.
 * @export
 * @interface ConnectorsApiCreateNewConnectorRequest
 */
export type ConnectorsApiCreateNewConnectorRequest = {
    
} & ConnectorsCreateNewConnectorRequest

/**
 * Request parameters for deleteById operation in ConnectorsApi.
 * @export
 * @interface ConnectorsApiDeleteByIdRequest
 */
export type ConnectorsApiDeleteByIdRequest = {
    
    /**
    * Unique ID of the connector
    * @type {string}
    * @memberof ConnectorsApiDeleteById
    */
    readonly id: string
    
}

/**
 * Request parameters for discoverCatalogInfo operation in ConnectorsApi.
 * @export
 * @interface ConnectorsApiDiscoverCatalogInfoRequest
 */
export type ConnectorsApiDiscoverCatalogInfoRequest = {
    
    /**
    * Unique ID of the connector
    * @type {string}
    * @memberof ConnectorsApiDiscoverCatalogInfo
    */
    readonly id: string
    
}

/**
 * Request parameters for getById operation in ConnectorsApi.
 * @export
 * @interface ConnectorsApiGetByIdRequest
 */
export type ConnectorsApiGetByIdRequest = {
    
    /**
    * Unique ID of the connector
    * @type {string}
    * @memberof ConnectorsApiGetById
    */
    readonly id: string
    
}

/**
 * Request parameters for querySource operation in ConnectorsApi.
 * @export
 * @interface ConnectorsApiQuerySourceRequest
 */
export type ConnectorsApiQuerySourceRequest = {
    
    /**
    * The ID of the connector to query
    * @type {number}
    * @memberof ConnectorsApiQuerySource
    */
    readonly id: number
    
} & ConnectorsQuerySourceRequest

/**
 * Request parameters for updateById operation in ConnectorsApi.
 * @export
 * @interface ConnectorsApiUpdateByIdRequest
 */
export type ConnectorsApiUpdateByIdRequest = {
    
    /**
    * Unique ID of the connector
    * @type {string}
    * @memberof ConnectorsApiUpdateById
    */
    readonly id: string
    
} & ConnectorsUpdateByIdRequest

/**
 * ConnectorsApiGenerated - object-oriented interface
 * @export
 * @class ConnectorsApiGenerated
 * @extends {BaseAPI}
 */
export class ConnectorsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Creates a connector
     * @param {ConnectorsApiCreateNewConnectorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorsApiGenerated
     */
    public createNewConnector(requestParameters: ConnectorsApiCreateNewConnectorRequest, options?: AxiosRequestConfig) {
        return ConnectorsApiFp(this.configuration).createNewConnector(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a specific connector by ID
     * @param {ConnectorsApiDeleteByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorsApiGenerated
     */
    public deleteById(requestParameters: ConnectorsApiDeleteByIdRequest, options?: AxiosRequestConfig) {
        return ConnectorsApiFp(this.configuration).deleteById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Discovers catalog information for a specified connector
     * @param {ConnectorsApiDiscoverCatalogInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorsApiGenerated
     */
    public discoverCatalogInfo(requestParameters: ConnectorsApiDiscoverCatalogInfoRequest, options?: AxiosRequestConfig) {
        return ConnectorsApiFp(this.configuration).discoverCatalogInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves a specific connector by ID
     * @param {ConnectorsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorsApiGenerated
     */
    public getById(requestParameters: ConnectorsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return ConnectorsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lists all connectors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorsApiGenerated
     */
    public listAll(options?: AxiosRequestConfig) {
        return ConnectorsApiFp(this.configuration).listAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Query your source data
     * @param {ConnectorsApiQuerySourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorsApiGenerated
     */
    public querySource(requestParameters: ConnectorsApiQuerySourceRequest, options?: AxiosRequestConfig) {
        return ConnectorsApiFp(this.configuration).querySource(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates a specific connector by ID
     * @param {ConnectorsApiUpdateByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorsApiGenerated
     */
    public updateById(requestParameters: ConnectorsApiUpdateByIdRequest, options?: AxiosRequestConfig) {
        return ConnectorsApiFp(this.configuration).updateById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
